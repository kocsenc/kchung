PROJECT LOG FILE and REFLECTION by Kocsen Chung 

Level #1 - convert the histogram code to Produce the histogram.
    
	- Parse file (completed by Source)
	- Build struct to represent tree node
		-character
		-count
		-leftPointer = NULL
		-rightPointer = NULL
	
	- Build linked list struct where head value is a tree node (completed by
	  Source)
		- Insert method (sortInsert)
			- Traverse until find NULLnext or greater val
			- Perform insertion
	- Implement remove
		-if list not empty
			- Create a pointer to head
			- Fix size
			- make new head head.next
	DONE


Initial estimate						= 30 minutes
Actual time								= 38 minutes

Level #2 (after task #1 completed) - traverse the sorted list:
	
	- Traverse nicely through linked list
		- Already done when building inserting
		- Sort linked list(Done with function that sorts as you insert it to the
		  list) 
	- Initialize ordered list
		- Traverse 26 times for every alphabet letter 
			- Note: dont worry about case (lower/upper)
			- Allocate memory for a new Tree node
			- Set char, value, left, and right nodes.
				- L/R nodes = NULL
			- Will have alphabet array with letters for ease of access
			- Use insert (sortInsert) to sort as adding to OL


Initial estimate						= 20 minutes
Re-estimate after level #1 completed	= 10 minutes
Actual time								= 12 minutes

Level #3 (after task #2 completed) - process the final tree:
   
	- Processing the final tree will be composed of 2 parts:
		- Building the tree
		- Traversing and calculating values
	- BUILDING THE TREE
		- The algorithm is in the documentation
			- Loop while there is more than one element in the OL
			- Each iteration will pop (use ol_remove()) the first 2 nodes and use the helper
			  function mktree to form a sub tree.
			- Re-insert (using ol_insert()) the newly made sub tree
		
	- TRAVERSING TREE
		- Plan on using recursion.
		- Note that an empty string"" is already initialized and passed in.
		- IF its a leaf node
			- then we have found a tree with a value so,
			- add the string that has been passed on to the data
			- free the node
		- ELSE if its a branch node
			- then allocate 2 strings (one for left, and one for right)
				- allocate memory of prefix + 1 to hold in the extra character
			- for each of the new strings, copy in the prefix
			- Then concatenate a 0 for the string goint to the left, 
			a 1 to the string going to the right
			- Recurse with the new concatenatedstring and the left/right node


Initial estimate						= 90 minutes
Re-estimate after level #2 completed	= 100 minutes 
Actual time								= 112 minutes

############### Project Total ###############

Total original estimate					= 140 minutes = 2.3 hrs
Total revised estimates					= 140 minutes = 2.3 hrs 
Actual									= 162 minutes = 2.7 hrs


############################ REFLECTION #########################

This project was harder than the previous one. 
I liked the integration of data structures and  the use of trees with linked
lists. The algorithms decribed were actually quite useful for future use,
especially the efficacy of building the tree. 

Something to note about the project is the use of various structs, and from
those structs only one was a typedef. That seems inconsistent.
Additionally, the way to handle repetead counts for inserting a node into the
list does alter the forming of the tree and therefore the bit code it generates. 
Which makes the project somewhat hard to test with defenite output. 

Overall, the project was great with its use of pointers, enough to demonstrate
the power and the use of pointers with C. In my opinion, C without pointers is
nothing so we really compartamentalized C with this project and its use of
pointers. Perfect project to close the book on C for now and go on to Ruby.

