/*
   Interface to the dequeue module - DO NOT EDIT THIS FILE!!!
 */

#ifndef DEQUEUE_H
#define DEQUEUE_H

#include "bool.h"

/*
 * The dequeue is implemented as a singly linked list of nodes, each
 * node holding a copy of the string with which it was created.
 * 
 */

typedef struct node{
	char *contents ;    	     /* allocated space for this node's string */
	struct node *link ;  	    /* the next node in the list */
}node;


/*
 * Put a new value at the head of the dequeue.
 * HINTS:
 *   * Allocate space for both a new node and its contents, then
 *     copy the value argument into the contents.
 *   * Link the node to the head of the list.
 */

extern void deq_put_head(node **deqhead, char *value) ;

/*
 * Put a new value at the tail of the dequeue.
 * HINTS:
 *   * Allocate space for both a new node and its contents, then
 *     copy the value argument into the contents.
 *   * Link the node to the tail of the list.
 */

extern void deq_put_tail(node **deqhead, char *value) ;

/*
 * Get the value at the head of the dequeue.
 * HINTS:
 *   * If the dequeue is empty, return immediately.
 *   * Otherwise,
 *     * Unlink the node at the head of the list.
 *     * Copy the contents to value argument.
 *     * Free the storage for the string in the node and
 *       then the node itself.
 */

extern void deq_get_head(node **deqhead, char *value) ;

/*
 * Get the value at the tail of the dequeue.
 * HINTS:
 *   * If the dequeue is empty, return immediately.
 *   * Otherwise,
 *     * Unlink the node at the tail of the list.
 *     * Copy the contents to value argument.
 *     * Free the storage for the string in the node and
 *       then the node itself.
 */

extern void deq_get_tail(node **deqhead, char *value) ;

/*
 * Return a boolean telling whether or not the dequeue is empty.
 * HINTS:
 *   * The dequeue is empty if its size is zero!
*/

extern bool deq_is_empty(node *deqhead) ;

/*
 * Return the size of the dequeue.
 * HINTS:
 *   * Simply traverse the list, counting the nodes.
 */

extern int deq_size(node *deqhead) ;

#endif
